package dunbar.c482pa.Controllers;

import dunbar.c482pa.Model.InHouse;
import dunbar.c482pa.Model.Inventory;
import dunbar.c482pa.Model.Outsourced;
import dunbar.c482pa.Model.Part;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.Region;
import javafx.stage.Stage;
import java.io.IOException;

/** The ModifyPartWindowController controls the interface used to modify existing parts in the Inventory allParts list. */
public class ModifyPartWindowController {
    /** Holds the main window to display scenes*/
    private Stage stage;
    /** Holds the scene for the window*/
    private Parent scene;
    /**Holds the index from the allParts list for the part to be modified*/
    private int index;
    /**Radio button for In House*/
    @FXML
    private RadioButton inHouseModifyRadio;
    /**Label for the MachineID/Company name field*/
    @FXML
    private ToggleGroup manufactureLocation;
    /**Text field for the part ID*/
    @FXML
    private TextField modifyIDField;
    /**Text field for part inventory*/
    @FXML
    private TextField modifyInventoryField;
    /**Text field for the MachineID/Company Name*/
    @FXML
    private TextField locationField;
    /**Text field for the min inventory value*/
    @FXML
    private TextField modifyMinField;
    /**Text field for the max inventory value*/
    @FXML
    private TextField modifyMaxField;
    /**Text field for the part name*/
    @FXML
    private TextField modifyNameField;
    /** Text field for the price*/
    @FXML
    private TextField modifyPriceField;
    /** Radio button for Outsourced*/
    @FXML
    private RadioButton outsourceModifiedRadio;
    /**Label for the MachineID/Company name field*/
    @FXML
    private Label locationLabel;

    /** Loads the current values for ID, Name, Stock, Price, Min, Max and MachineID/Company Name for the selected part.
     * @param selectedPart Part object to modify*/
    public void loadPart(Part selectedPart){
        index = Inventory.getAllParts().indexOf(selectedPart);
        modifyIDField.setText(String.valueOf(selectedPart.getId()));
        modifyInventoryField.setText(String.valueOf(selectedPart.getStock()));
        modifyMinField.setText(String.valueOf(selectedPart.getMin()));
        modifyMaxField.setText(String.valueOf(selectedPart.getMax()));
        modifyNameField.setText(selectedPart.getName());
        modifyPriceField.setText(String.valueOf(selectedPart.getPrice()));

        if(selectedPart instanceof InHouse){
            inHouseModifyRadio.setSelected(true);
            locationField.setText(String.valueOf(((InHouse) selectedPart).getMachineID()));
        }
        else{
            outsourceModifiedRadio.setSelected(true);
            locationLabel.setText("Company Name");
            locationField.setText(String.valueOf(((Outsourced) selectedPart).getCompanyName()));
        }
    }

    /**Loads the specified scene for a new window.
     * @param event An action even for a button press in the GUI
     * @param newAddress The package address for the desired FXML file*/
    private void changeWindowButton (ActionEvent event, String newAddress) throws IOException{
        stage = (Stage)((Button)event.getSource()).getScene().getWindow();
        scene = FXMLLoader.load((getClass().getResource(newAddress)));
        stage.setScene(new Scene(scene));
        stage.show();
    }

    /** Changes the label for the location text box.
     * Sets the location label to Machine ID when the In House radio button is selected.
     * @param event Event generated by selecting the In House radio button*/
    @FXML
    void onActionInHouse(ActionEvent event) {
        locationLabel.setText("Machine ID");
    }

    /** Changes the label for the location text box.
     * Sets the location label to Company Name when the Outsourced radio button is selected.
     * @param event Event generated by selecting the Outsourced radio button*/
    @FXML
    void onActionOutsourced(ActionEvent event) {
        locationLabel.setText("Company Name");
    }

    /** Returns to the Main window when the cancel button is pressed.
     * @param event Event generated by pressing the cancel button*/
    @FXML
    void onActionReturnToMain(ActionEvent event) throws IOException {
        changeWindowButton(event, "/dunbar/c482pa/MainWindow.fxml");
    }

    /** Saves the modified part and returns to the main window when the Save button is pressed.
     * Generates a new Part object based off of the values in the text fields and passes them to the relevant
     * constructor, then overwrites the original part in the Inventory allParts list using the index value.
     * @param event Event generated by pressing the Save button*/
    @FXML
    void onActionSaveAndReturn(ActionEvent event) throws IOException, NumberFormatException {
        try {
            int id = Integer.parseInt(modifyIDField.getText());
            String name = "fill";
            int stock = 0;
            double price = 0.00;
            int max = 0;
            int min = 0;
            int machineId = 0;
            String companyName = "fill";
            Part updatePart;

            //Generates the name, stock, price, max, min, and machine ID/Company Name inputs based off of the associated
            // text fields. Exception handling used to ensure valid inputs.
            try{
                name = modifyNameField.getText();
                if (name.isEmpty()) {
                    throw new Exception();
                }
            } catch (Exception badName) {
                Alert alert = new Alert(Alert.AlertType.ERROR, "Please enter a name");
                alert.getDialogPane().setMinHeight(Region.USE_PREF_SIZE);
                alert.show();
                return;
            }

            try{
                stock = Integer.parseInt(modifyInventoryField.getText());
                if (stock < 0) {
                    throw new Exception();
                }
            } catch (NumberFormatException badValue) {
                Alert alert = new Alert(Alert.AlertType.ERROR, "Please enter a valid Inventory value. This includes whole numbers greater than or equal to zero.");
                alert.getDialogPane().setMinHeight(Region.USE_PREF_SIZE);
                alert.show();
                return;
            } catch (Exception badValue) {
                Alert alert = new Alert(Alert.AlertType.ERROR, "Please enter a valid Inventory value. This includes whole numbers greater than or equal to zero.");
                alert.getDialogPane().setMinHeight(Region.USE_PREF_SIZE);
                alert.show();
                return;
            }

            try{
                price = Double.parseDouble(modifyPriceField.getText());
                price = Math.floor(price * 100) / 100;  //Truncates price values to two decimal places.
                if (price < 0) {
                    throw new Exception();
                }
            } catch (NumberFormatException notADouble) {
                Alert alert = new Alert(Alert.AlertType.ERROR, "Please enter a valid Price. Price should be greater than or equal to zero and formatted \"0.00\" ");
                alert.getDialogPane().setMinHeight(Region.USE_PREF_SIZE);
                alert.show();
                return;
            } catch (Exception badValue) {
                Alert alert = new Alert(Alert.AlertType.ERROR, "Please enter a valid Price. Price should be greater than or equal to zero and formatted \"0.00\" ");
                alert.getDialogPane().setMinHeight(Region.USE_PREF_SIZE);
                alert.show();
                return;
            }

            try{
                max = Integer.parseInt(modifyMaxField.getText());
                min = Integer.parseInt(modifyMinField.getText());
                if (max < 0 || min < 0 || max < min) {
                    throw new Exception();
                }
            } catch (NumberFormatException notInt) {
                Alert alert = new Alert(Alert.AlertType.ERROR, "Please enter valid values for max/min. This includes whole numbers greater than or equal to zero. Max cannot be less than min.");
                alert.getDialogPane().setMinHeight(Region.USE_PREF_SIZE);
                alert.show();
                return;
            } catch (Exception badValue) {
                Alert alert = new Alert(Alert.AlertType.ERROR, "Please enter valid values for max/min. This includes whole numbers greater than or equal to zero. Max cannot be less than min.");
                alert.getDialogPane().setMinHeight(Region.USE_PREF_SIZE);
                alert.show();
                return;
            }
            if (stock < min || stock > max) {
                throw new Exception();
            }

            if (inHouseModifyRadio.isSelected()) {
                try{
                    machineId = Integer.parseInt(locationField.getText());
                    if (machineId < 0) {
                        throw new Exception();
                    }
                    //Passes values from the text fields into the constructor for a new InHouse part
                    updatePart = new InHouse(id, name, price, stock, min, max, machineId);
                    Inventory.updatePart(index, updatePart);
                } catch (NumberFormatException notInt) {
                    Alert alert = new Alert(Alert.AlertType.ERROR, "Please enter valid machine ID. This includes whole numbers greater than 0");
                    alert.getDialogPane().setMinHeight(Region.USE_PREF_SIZE);
                    alert.show();
                    return;
                } catch (Exception badValue) {
                    Alert alert = new Alert(Alert.AlertType.ERROR, "Please enter valid machine ID. This includes whole numbers greater than 0");
                    alert.getDialogPane().setMinHeight(Region.USE_PREF_SIZE);
                    alert.show();
                    return;
                }
            }
            else {
                try {
                    companyName = locationField.getText();
                    if (companyName.isEmpty()) {
                        throw new Exception();
                    }
                    //Passes values from the text fields into the constructor for a new Outsourced part
                    updatePart = new Outsourced(id, name, price, stock, min, max, companyName);
                    Inventory.updatePart(index, updatePart);
                }
                catch(Exception badCompany){
                    Alert alert = new Alert(Alert.AlertType.ERROR, "Please enter a company name");
                    alert.getDialogPane().setMinHeight(Region.USE_PREF_SIZE);
                    alert.show();
                    return;
                }
            }
            //Loads the main window
            changeWindowButton(event, "/dunbar/c482pa/MainWindow.fxml");
        }
        catch (Exception badStock) {
            Alert alert = new Alert(Alert.AlertType.ERROR, "Invalid inventory/ max and min combination. Ensure amount in stock is equal to or between max and min.");
            alert.getDialogPane().setMinHeight(Region.USE_PREF_SIZE);
            alert.show();
            return;
        }

    }

}
