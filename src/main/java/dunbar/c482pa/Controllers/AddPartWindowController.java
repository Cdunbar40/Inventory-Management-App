package dunbar.c482pa.Controllers;

import dunbar.c482pa.Model.InHouse;
import dunbar.c482pa.Model.Inventory;
import dunbar.c482pa.Model.Outsourced;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.Region;
import javafx.stage.Stage;
import java.io.IOException;
import java.net.URL;
import java.util.ResourceBundle;

/** The AddPartWindowController controls the interface used to add new parts to the Inventory.
 * It implements the Initializable interface to automatically generate a valid part ID for the new part. */
public class AddPartWindowController implements Initializable {

    /** Holds the main window to display scenes*/
    private Stage stage;
    /** Holds the scene for the window*/
    private Parent scene;
    /** Initializes the ID for the next part to 1.
     * Used in initialize()*/
    private int nextID = 1;

    /**Text field for the part ID*/
    @FXML
    private TextField idText;
    /**Label for the MachineID/Company name field*/
    @FXML
    private Label locationLabel;
    /**Radio button for In House*/
    @FXML
    private RadioButton inHouseRadio;
    /**Text field for part inventory*/
    @FXML
    private TextField invText;
    /**Text field for the MachineID/Company Name*/
    @FXML
    private TextField locationText;
    /**Toggle group for the In House and Outsourced Radio buttons*/
    @FXML
    private ToggleGroup manufactureLocation;
    /**Text field for the max inventory value*/
    @FXML
    private TextField maxText;
    /**Text field for the min inventory value*/
    @FXML
    private TextField minText;
    /**Text field for the part name*/
    @FXML
    private TextField nameText;
    /** Radio button for Outsourced*/
    @FXML
    private RadioButton outsourcedRadio;
    /** Text field for the price*/
    @FXML
    private TextField priceText;


    /** Generates a unique part ID based on other parts currently in inventory.
     * @param url The location used to resolve relative paths for the root object, or null if the location is not known.
     * @param resourceBundle The resources used to localize the root object, or null if the root object was not localized.*/
    @Override
    public void initialize(URL url, ResourceBundle resourceBundle) {
        int i = 0;
        int numParts = Inventory.getAllParts().size();

        for(i = 0; i < numParts; i++)
            if(nextID == (Inventory.getAllParts()).get(i).getId()){
                nextID++;
                i = 0;
            }
        idText.setText(String.valueOf(nextID));
    }

    /** Loads the specified scene for a new window.
     * @param event An action even for a button press in the GUI
     * @param newAddress The package address for the desired FXML file*/
    private void changeWindowButton (ActionEvent event, String newAddress) throws IOException{
        stage = (Stage)((Button)event.getSource()).getScene().getWindow();
        scene = FXMLLoader.load((getClass().getResource(newAddress)));
        stage.setScene(new Scene(scene));
        stage.show();
    }

    /** Changes the label for the location text box.
     * Sets the location label to Machine ID when the In House radio button is selected.
     * @param event Event generated by selecting the In House radio button*/
    @FXML
    void onActionInHouse(ActionEvent event) {
        locationLabel.setText("Machine ID");
    }

    /** Changes the label for the location text box.
     * Sets the location label to Company Name when the Outsourced radio button is selected.
     * @param event Event generated by selecting the Outsourced radio button*/
    @FXML
    void onActionOutsourced(ActionEvent event) {
        locationLabel.setText("Company Name");
    }

    /** Returns to the Main window when the cancel button is pressed.
     * @param event Event generated by pressing the cancel button*/
    @FXML
    void onActionReturnToMain(ActionEvent event) throws IOException {
        changeWindowButton(event, "/dunbar/c482pa/MainWindow.fxml");
    }

    /** Saves the new part and returns to the main window when the Save button is pressed.
     * Generates a new Part object based off of the values in the text fields and passes them to the relevant
     * constructor, then adds the new part to the Inventory allParts list.
     * @param event Event generated by pressing the Save button*/
    @FXML
    void onActionSaveAndReturn(ActionEvent event) throws IOException, NumberFormatException {
        try {
            int id = Integer.parseInt(idText.getText());
            String name = "fill";
            int stock = 0;
            double price = 0.00;
            int max = 0;
            int min = 0;
            int machineId = 0;
            String companyName = "fill";

            //Generates the name, stock, price, max, min, and machine ID/Company Name inputs based off of the associated
            // text fields. Exception handling used to ensure valid inputs.
            try {
                name = nameText.getText();
                if (name.isEmpty()) {
                    throw new Exception();
                }
            } catch (Exception badName) {
                Alert alert = new Alert(Alert.AlertType.ERROR, "Please enter a name");
                alert.getDialogPane().setMinHeight(Region.USE_PREF_SIZE);
                alert.show();
                return;
            }

            try {
                stock = Integer.parseInt(invText.getText());
                if (stock < 0) {
                    throw new Exception();
                }
            } catch (NumberFormatException badValue) {
                Alert alert = new Alert(Alert.AlertType.ERROR, "Please enter a valid Inventory value. This includes whole numbers greater than or equal to zero.");
                alert.getDialogPane().setMinHeight(Region.USE_PREF_SIZE);
                alert.show();
                return;
            } catch (Exception badValue) {
                Alert alert = new Alert(Alert.AlertType.ERROR, "Please enter a valid Inventory value. This includes whole numbers greater than or equal to zero.");
                alert.getDialogPane().setMinHeight(Region.USE_PREF_SIZE);
                alert.show();
                return;
            }

            try {
                price = Double.parseDouble(priceText.getText());
                price = Math.floor(price * 100) / 100;  //Truncates price values to two decimal places.
                if (price < 0) {
                    throw new Exception();
                }
            } catch (NumberFormatException notADouble) {
                Alert alert = new Alert(Alert.AlertType.ERROR, "Please enter a valid Price. Price should be greater than or equal to zero and formatted \"0.00\" ");
                alert.getDialogPane().setMinHeight(Region.USE_PREF_SIZE);
                alert.show();
                return;
            } catch (Exception badValue) {
                Alert alert = new Alert(Alert.AlertType.ERROR, "Please enter a valid Price. Price should be greater than or equal to zero and formatted \"0.00\" ");
                alert.getDialogPane().setMinHeight(Region.USE_PREF_SIZE);
                alert.show();
                return;
            }

            try {
                max = Integer.parseInt(maxText.getText());
                min = Integer.parseInt(minText.getText());
                if (max < 0 || min < 0 || max < min) {
                    throw new Exception();
                }
            } catch (NumberFormatException notInt) {
                Alert alert = new Alert(Alert.AlertType.ERROR, "Please enter valid values for max/min. This includes whole numbers greater than or equal to zero. Max cannot be less than min.");
                alert.getDialogPane().setMinHeight(Region.USE_PREF_SIZE);
                alert.show();
                return;
            } catch (Exception badValue) {
                Alert alert = new Alert(Alert.AlertType.ERROR, "Please enter valid values for max/min. This includes whole numbers greater than or equal to zero. Max cannot be less than min.");
                alert.getDialogPane().setMinHeight(Region.USE_PREF_SIZE);
                alert.show();
                return;
            }
            if (stock < min || stock > max) {
                throw new Exception();
            }

            if (inHouseRadio.isSelected()) {
                try {
                    machineId = Integer.parseInt(locationText.getText());
                    if (machineId < 0) {
                        throw new Exception();
                    }
                    //Passes values from the text fields into the constructor for a new InHouse part
                    Inventory.addPart(new InHouse(id, name, price, stock, min, max, machineId));
                } catch (NumberFormatException notInt) {
                    Alert alert = new Alert(Alert.AlertType.ERROR, "Please enter valid machine ID. This includes whole numbers greater than 0");
                    alert.getDialogPane().setMinHeight(Region.USE_PREF_SIZE);
                    alert.show();
                    return;
                } catch (Exception badValue) {
                    Alert alert = new Alert(Alert.AlertType.ERROR, "Please enter valid machine ID. This includes whole numbers greater than 0");
                    alert.getDialogPane().setMinHeight(Region.USE_PREF_SIZE);
                    alert.show();
                    return;
                }
            } else {
                try {
                    companyName = locationText.getText();
                    if (companyName.isEmpty()) {
                        throw new Exception();
                    }
                    //Passes values from the text fields into the constructor for a new Outsourced part
                    Inventory.addPart(new Outsourced(id, name, price, stock, min, max, companyName));
                }
                catch(Exception badCompany){
                    Alert alert = new Alert(Alert.AlertType.ERROR, "Please enter a company name");
                    alert.getDialogPane().setMinHeight(Region.USE_PREF_SIZE);
                    alert.show();
                    return;
                }
            }
        //Loads the main window
        changeWindowButton(event, "/dunbar/c482pa/MainWindow.fxml");
    }
        catch (Exception badStock) {
            Alert alert = new Alert(Alert.AlertType.ERROR, "Invalid inventory/ max and min combination. Ensure amount in stock is equal to or between max and min.");
            alert.getDialogPane().setMinHeight(Region.USE_PREF_SIZE);
            alert.show();
            return;
        }
    }
}
